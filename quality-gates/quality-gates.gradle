buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        jcenter()
    }
    dependencies {
        classpath "gradle.plugin.org.myire:quill:2.3.1"
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.0.5"
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.4.6'
    }
}

apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'project-report'
apply plugin: org.myire.quill.cpd.CpdPlugin
apply plugin: com.github.spotbugs.snom.SpotBugsPlugin
apply plugin: info.solidsoft.gradle.pitest.PitestPlugin

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
}

pmd {
    consoleOutput = true
    toolVersion = "6.22.0"
    ruleSets = ["${rootDir}/quality-gates/static-analysis-rules/pmd-rules.xml"]
}
// This disables running PMD on test files , by default PMD runs on tests also when ran with gradle check goal
pmdTest.enabled = false

cpd {
    language = 'java'
    toolVersion = '6.19.0'
    minimumTokenCount = 30 // approximately 5-10 lines
    ignoreLiterals = false
    reports.primary.format = 'xml'
}

spotbugs {
    toolVersion = '4.0.2'
    effort = "max"
    ignoreFailures = false
    showProgress = true
}
// This disables running spotbugs on test files , by default Spotbugs runs on tests also when ran with gradle check goal
spotbugsTest.enabled = false

spotbugsMain {
    description("Runs spot bugs on production source code")
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

checkstyle {
    toolVersion '8.31'
    configFile file("${rootDir}/quality-gates/static-analysis-rules/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = file("${rootDir}/quality-gates/static-analysis-rules/checkstyle-suppressions.xml").absolutePath
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

pitest {
    targetClasses = ['org.philips.swcoe.qualityGatesDemo.*']
    testSourceSets = [sourceSets.test]
    mainSourceSets = [sourceSets.main]
    pitestVersion = '1.5.1'
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 100
}
